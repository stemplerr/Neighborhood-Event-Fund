#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventFund.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EventFund")]
	public partial class EventDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContribution(Contribution instance);
    partial void UpdateContribution(Contribution instance);
    partial void DeleteContribution(Contribution instance);
    partial void InsertContributor(Contributor instance);
    partial void UpdateContributor(Contributor instance);
    partial void DeleteContributor(Contributor instance);
    partial void InsertDeposit(Deposit instance);
    partial void UpdateDeposit(Deposit instance);
    partial void DeleteDeposit(Deposit instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    #endregion
		
		public EventDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EventFundConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EventDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contribution> Contributions
		{
			get
			{
				return this.GetTable<Contribution>();
			}
		}
		
		public System.Data.Linq.Table<Contributor> Contributors
		{
			get
			{
				return this.GetTable<Contributor>();
			}
		}
		
		public System.Data.Linq.Table<Deposit> Deposits
		{
			get
			{
				return this.GetTable<Deposit>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contributions")]
	public partial class Contribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ContributorId;
		
		private int _EventId;
		
		private System.DateTime _Date;
		
		private int _ContributionAmount;
		
		private EntityRef<Contributor> _Contributor;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnContributorIdChanging(int value);
    partial void OnContributorIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnContributionAmountChanging(int value);
    partial void OnContributionAmountChanged();
    #endregion
		
		public Contribution()
		{
			this._Contributor = default(EntityRef<Contributor>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContributorId", DbType="Int NOT NULL")]
		public int ContributorId
		{
			get
			{
				return this._ContributorId;
			}
			set
			{
				if ((this._ContributorId != value))
				{
					if (this._Contributor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContributorIdChanging(value);
					this.SendPropertyChanging();
					this._ContributorId = value;
					this.SendPropertyChanged("ContributorId");
					this.OnContributorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContributionAmount", DbType="Int NOT NULL")]
		public int ContributionAmount
		{
			get
			{
				return this._ContributionAmount;
			}
			set
			{
				if ((this._ContributionAmount != value))
				{
					this.OnContributionAmountChanging(value);
					this.SendPropertyChanging();
					this._ContributionAmount = value;
					this.SendPropertyChanged("ContributionAmount");
					this.OnContributionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contributor_Contribution", Storage="_Contributor", ThisKey="ContributorId", OtherKey="Id", IsForeignKey=true)]
		public Contributor Contributor
		{
			get
			{
				return this._Contributor.Entity;
			}
			set
			{
				Contributor previousValue = this._Contributor.Entity;
				if (((previousValue != value) 
							|| (this._Contributor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contributor.Entity = null;
						previousValue.Contributions.Remove(this);
					}
					this._Contributor.Entity = value;
					if ((value != null))
					{
						value.Contributions.Add(this);
						this._ContributorId = value.Id;
					}
					else
					{
						this._ContributorId = default(int);
					}
					this.SendPropertyChanged("Contributor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Contribution", Storage="_Event", ThisKey="EventId", OtherKey="Id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Contributions.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Contributions.Add(this);
						this._EventId = value.Id;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contributors")]
	public partial class Contributor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _CellNumber;
		
		private int _Id;
		
		private bool _AlwaysInclude;
		
		private EntitySet<Contribution> _Contributions;
		
		private EntitySet<Deposit> _Deposits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCellNumberChanging(string value);
    partial void OnCellNumberChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAlwaysIncludeChanging(bool value);
    partial void OnAlwaysIncludeChanged();
    #endregion
		
		public Contributor()
		{
			this._Contributions = new EntitySet<Contribution>(new Action<Contribution>(this.attach_Contributions), new Action<Contribution>(this.detach_Contributions));
			this._Deposits = new EntitySet<Deposit>(new Action<Deposit>(this.attach_Deposits), new Action<Deposit>(this.detach_Deposits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CellNumber
		{
			get
			{
				return this._CellNumber;
			}
			set
			{
				if ((this._CellNumber != value))
				{
					this.OnCellNumberChanging(value);
					this.SendPropertyChanging();
					this._CellNumber = value;
					this.SendPropertyChanged("CellNumber");
					this.OnCellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlwaysInclude", DbType="Bit NOT NULL")]
		public bool AlwaysInclude
		{
			get
			{
				return this._AlwaysInclude;
			}
			set
			{
				if ((this._AlwaysInclude != value))
				{
					this.OnAlwaysIncludeChanging(value);
					this.SendPropertyChanging();
					this._AlwaysInclude = value;
					this.SendPropertyChanged("AlwaysInclude");
					this.OnAlwaysIncludeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contributor_Contribution", Storage="_Contributions", ThisKey="Id", OtherKey="ContributorId")]
		public EntitySet<Contribution> Contributions
		{
			get
			{
				return this._Contributions;
			}
			set
			{
				this._Contributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contributor_Deposit", Storage="_Deposits", ThisKey="Id", OtherKey="ContributorId")]
		public EntitySet<Deposit> Deposits
		{
			get
			{
				return this._Deposits;
			}
			set
			{
				this._Deposits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.Contributor = this;
		}
		
		private void detach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.Contributor = null;
		}
		
		private void attach_Deposits(Deposit entity)
		{
			this.SendPropertyChanging();
			entity.Contributor = this;
		}
		
		private void detach_Deposits(Deposit entity)
		{
			this.SendPropertyChanging();
			entity.Contributor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Deposit")]
	public partial class Deposit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private int _ContributorId;
		
		private int _Amount;
		
		private EntityRef<Contributor> _Contributor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnContributorIdChanging(int value);
    partial void OnContributorIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public Deposit()
		{
			this._Contributor = default(EntityRef<Contributor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContributorId", DbType="Int NOT NULL")]
		public int ContributorId
		{
			get
			{
				return this._ContributorId;
			}
			set
			{
				if ((this._ContributorId != value))
				{
					if (this._Contributor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContributorIdChanging(value);
					this.SendPropertyChanging();
					this._ContributorId = value;
					this.SendPropertyChanged("ContributorId");
					this.OnContributorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contributor_Deposit", Storage="_Contributor", ThisKey="ContributorId", OtherKey="Id", IsForeignKey=true)]
		public Contributor Contributor
		{
			get
			{
				return this._Contributor.Entity;
			}
			set
			{
				Contributor previousValue = this._Contributor.Entity;
				if (((previousValue != value) 
							|| (this._Contributor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contributor.Entity = null;
						previousValue.Deposits.Remove(this);
					}
					this._Contributor.Entity = value;
					if ((value != null))
					{
						value.Deposits.Add(this);
						this._ContributorId = value.Id;
					}
					else
					{
						this._ContributorId = default(int);
					}
					this.SendPropertyChanged("Contributor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventHost;
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private int _Total;
		
		private EntitySet<Contribution> _Contributions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventHostChanging(string value);
    partial void OnEventHostChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTotalChanging(int value);
    partial void OnTotalChanged();
    #endregion
		
		public Event()
		{
			this._Contributions = new EntitySet<Contribution>(new Action<Contribution>(this.attach_Contributions), new Action<Contribution>(this.detach_Contributions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventHost", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EventHost
		{
			get
			{
				return this._EventHost;
			}
			set
			{
				if ((this._EventHost != value))
				{
					this.OnEventHostChanging(value);
					this.SendPropertyChanging();
					this._EventHost = value;
					this.SendPropertyChanged("EventHost");
					this.OnEventHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Contribution", Storage="_Contributions", ThisKey="Id", OtherKey="EventId")]
		public EntitySet<Contribution> Contributions
		{
			get
			{
				return this._Contributions;
			}
			set
			{
				this._Contributions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
}
#pragma warning restore 1591
